12/5/2018

Running with 10 neutrons


Started out with a lot of GC time:
INIT    time    0.000s  (  0.001s elapsed)
MUT     time    1.297s  (  1.185s elapsed)
GC      time    2.875s  (  1.251s elapsed)
EXIT    time    0.000s  (  0.000s elapsed)
Total   time    4.172s  (  2.438s elapsed)

Alloc rate    1,898,620,378 bytes per MUT second

Productivity  31.1% of total user, 48.6% of total elapsed

Got a graph name heap_1.pdf. Didn't help a whole bunch, but there does seem to be a big spike in allocation with each neutron.

Switched to one neutron because things were taking to long with profiling enabled.

Weird issue with Data.Attoparsec (the parsing library used by the library I use to read STLs).
It accounts for steadily increasing heap usage for the first 20 odd seconds of the program.
I tried making fromTris in Mesh.hs force its argument to be strict -> that didn't do anything.

I tried printing the triangles before I ran the program - this seemed to help.
Then why doesn't the strictness annotation in fromTris help?

I added some more strictness annotations.

I think replicateM_ could be the problem? Weird. Not sure.
It seems like it is the problem. I tried using a combination of sequence_, take, and repeat -> same as replicateM_.

Nope, it wasn't replicateM_. It was about laziness.
Currently, I'm printing the number of triangles in the model.
This pushes the time to the start.
While it was faster with the profiling, it doesn't give me much better stats.

INIT    time    0.016s  (  0.001s elapsed)
MUT     time    1.219s  (  1.207s elapsed)
GC      time    2.812s  (  1.283s elapsed)
EXIT    time    0.000s  (  0.000s elapsed)
Total   time    4.047s  (  2.491s elapsed)

Alloc rate    2,020,337,066 bytes per MUT second

Productivity  30.1% of total user, 48.5% of total elapsed

That looks about the same, but I feel that it is better. IDK.
